from datetime import datetime
from app import db

class ActivityLog(db.Model):
    """Model for tracking activity in the application."""
    id = db.Column(db.Integer, primary_key=True)
    action = db.Column(db.String(100), nullable=False)
    details = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.now)
    
    def __repr__(self):
        return f"<ActivityLog {self.action}>"

class JobRun(db.Model):
    """Model for tracking scraper job runs."""
    id = db.Column(db.Integer, primary_key=True)
    start_time = db.Column(db.DateTime, default=datetime.now)
    end_time = db.Column(db.DateTime)
    status = db.Column(db.String(20))  # 'running', 'completed', 'failed'
    error = db.Column(db.Text)
    items_processed = db.Column(db.Integer, default=0)
    created_at = db.Column(db.DateTime, default=datetime.now)
    
    def __repr__(self):
        return f"<JobRun {self.id} - {self.status}>"

class NarrprCredential(db.Model):
    """Model for storing NARRPR credentials."""
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(255), nullable=False)
    password = db.Column(db.String(255), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.now)
    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)
    
    def __repr__(self):
        return f"<NarrprCredential {self.username}>"

class AIFeedback(db.Model):
    """Model for storing feedback on AI agent responses."""
    id = db.Column(db.Integer, primary_key=True)
    agent_type = db.Column(db.String(50), nullable=False)  # summarizer, market_analyzer, recommender, nl_search
    query_data = db.Column(db.Text, nullable=False)  # The input provided to the agent
    response_data = db.Column(db.Text, nullable=False)  # The response generated by the agent
    rating = db.Column(db.Integer, nullable=False)  # 1-5 star rating
    comments = db.Column(db.Text, nullable=True)  # Optional user comments
    session_id = db.Column(db.String(64), nullable=True)  # To group multiple interactions from same session
    prompt_version_id = db.Column(db.Integer, db.ForeignKey('prompt_version.id'), nullable=True)  # The prompt version used
    extra_data = db.Column(db.Text, nullable=True)  # JSON blob with additional metadata (e.g., A/B test data)
    created_at = db.Column(db.DateTime, default=datetime.now)
    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)
    
    # Relationship with prompt version
    prompt_version = db.relationship('PromptVersion', backref=db.backref('feedback', lazy=True))
    
    def __repr__(self):
        return f"<AIFeedback {self.agent_type} - {self.rating} stars>"
        
class AIFeedbackReportSettings(db.Model):
    """Model for storing AI feedback report settings."""
    id = db.Column(db.Integer, primary_key=True)
    
    # Recipients
    admin_email = db.Column(db.String(255), nullable=True)  # Primary admin email for reports
    additional_recipients = db.Column(db.Text, nullable=True)  # JSON array of additional email addresses
    
    # Schedule settings
    send_daily_reports = db.Column(db.Boolean, default=False)
    send_weekly_reports = db.Column(db.Boolean, default=True)
    send_monthly_reports = db.Column(db.Boolean, default=True)
    
    # Weekly report day (0-6, Monday to Sunday)
    weekly_report_day = db.Column(db.Integer, default=0)
    
    # Monthly report day (1-31)
    monthly_report_day = db.Column(db.Integer, default=1)
    
    # Report content settings
    include_detailed_feedback = db.Column(db.Boolean, default=True)
    include_csv_attachment = db.Column(db.Boolean, default=True)
    include_excel_attachment = db.Column(db.Boolean, default=True)
    
    # Updated timestamp
    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)
    
    def __repr__(self):
        return f"<AIFeedbackReportSettings id={self.id}>"
    
    @staticmethod
    def get_settings():
        """Get the current settings, creating default settings if none exist."""
        from app import db
        
        settings = AIFeedbackReportSettings.query.first()
        if not settings:
            settings = AIFeedbackReportSettings()
            db.session.add(settings)
            db.session.commit()
        
        return settings
        
class PromptABTest(db.Model):
    """Model for storing A/B test data for prompt optimization."""
    id = db.Column(db.Integer, primary_key=True)
    agent_type = db.Column(db.String(50), nullable=False)  # Type of agent being tested
    original_prompt = db.Column(db.Text, nullable=False)  # Version A (original)
    improved_prompt = db.Column(db.Text, nullable=False)  # Version B (improved)
    start_date = db.Column(db.DateTime, nullable=False, default=datetime.now)
    end_date = db.Column(db.DateTime, nullable=False)
    status = db.Column(db.String(20), nullable=False)  # 'active', 'completed', 'cancelled'
    results = db.Column(db.Text, nullable=True)  # JSON blob with test results
    created_at = db.Column(db.DateTime, default=datetime.now)
    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)
    
    def __repr__(self):
        return f"<PromptABTest id={self.id} agent={self.agent_type} status={self.status}>"
        
class PromptVersion(db.Model):
    """Model for storing prompt versions for different agents."""
    id = db.Column(db.Integer, primary_key=True)
    agent_type = db.Column(db.String(50), nullable=False)  # Type of agent
    version = db.Column(db.Integer, nullable=False)  # Version number
    prompt_text = db.Column(db.Text, nullable=False)  # The prompt text
    is_active = db.Column(db.Boolean, default=False)  # Whether this is the currently active version
    notes = db.Column(db.Text, nullable=True)  # Notes about this version
    created_at = db.Column(db.DateTime, default=datetime.now)
    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)
    
    def __repr__(self):
        return f"<PromptVersion id={self.id} agent={self.agent_type} v{self.version} active={self.is_active}>"
    
    @staticmethod
    def get_active_prompt(agent_type):
        """Get the active prompt for a specific agent type."""
        from app import db
        
        prompt = PromptVersion.query.filter_by(
            agent_type=agent_type,
            is_active=True
        ).order_by(PromptVersion.version.desc()).first()
        
        if not prompt:
            # If no active prompt exists, get the latest version
            prompt = PromptVersion.query.filter_by(
                agent_type=agent_type
            ).order_by(PromptVersion.version.desc()).first()
            
            if prompt:
                # Make it active
                prompt.is_active = True
                db.session.commit()
        
        return prompt
        
class LearningCycle(db.Model):
    """Model for tracking AI continuous learning cycles."""
    id = db.Column(db.Integer, primary_key=True)
    start_date = db.Column(db.DateTime, nullable=False, default=datetime.now)
    end_date = db.Column(db.DateTime, nullable=True)
    status = db.Column(db.String(20), nullable=False, default='in_progress')  # 'in_progress', 'completed', 'failed', 'cancelled'
    agents_processed = db.Column(db.Integer, default=0)  # Number of agents processed
    agents_optimized = db.Column(db.Integer, default=0)  # Number of agents that were successfully optimized
    average_improvement = db.Column(db.Float, default=0.0)  # Average percentage improvement across all agents
    error_message = db.Column(db.Text, nullable=True)  # Error message if failed
    results = db.Column(db.Text, nullable=True)  # JSON blob with detailed results
    created_at = db.Column(db.DateTime, default=datetime.now)
    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)
    
    def __repr__(self):
        return f"<LearningCycle id={self.id} status={self.status} agents_optimized={self.agents_optimized}>"
        
class AgentOptimizationResult(db.Model):
    """Model for storing results of agent optimizations in learning cycles."""
    id = db.Column(db.Integer, primary_key=True)
    learning_cycle_id = db.Column(db.Integer, db.ForeignKey('learning_cycle.id'), nullable=False)
    agent_type = db.Column(db.String(50), nullable=False)  # Type of agent
    original_prompt_id = db.Column(db.Integer, db.ForeignKey('prompt_version.id'), nullable=True)
    new_prompt_id = db.Column(db.Integer, db.ForeignKey('prompt_version.id'), nullable=True)
    original_rating = db.Column(db.Float, nullable=True)  # Average rating before optimization
    new_rating = db.Column(db.Float, nullable=True)  # Average rating after optimization
    improvement_percentage = db.Column(db.Float, nullable=True)  # Percentage improvement
    tests_run = db.Column(db.Integer, default=0)  # Number of A/B tests run
    successful = db.Column(db.Boolean, default=False)  # Whether optimization was successful
    applied = db.Column(db.Boolean, default=False)  # Whether the optimization was applied
    notes = db.Column(db.Text, nullable=True)  # Notes about the optimization
    created_at = db.Column(db.DateTime, default=datetime.now)
    
    # Relationships
    learning_cycle = db.relationship('LearningCycle', backref=db.backref('agent_results', lazy=True))
    original_prompt = db.relationship('PromptVersion', foreign_keys=[original_prompt_id])
    new_prompt = db.relationship('PromptVersion', foreign_keys=[new_prompt_id])
    
    def __repr__(self):
        return f"<AgentOptimizationResult id={self.id} agent={self.agent_type} improvement={self.improvement_percentage}%>"
        
class AIIntegration(db.Model):
    """Model for storing AI integration configurations with external systems."""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)  # Descriptive name for the integration
    integration_type = db.Column(db.String(50), nullable=False)  # Type of integration (e.g., webhook, api, email)
    agent_type = db.Column(db.String(50), nullable=False)  # Agent type this integration applies to
    config = db.Column(db.Text, nullable=False)  # JSON configuration for the integration
    is_active = db.Column(db.Boolean, default=True)  # Whether this integration is currently active
    last_executed = db.Column(db.DateTime, nullable=True)  # When this integration was last executed
    execution_count = db.Column(db.Integer, default=0)  # Number of times this integration has been executed
    created_at = db.Column(db.DateTime, default=datetime.now)
    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)
    
    def __repr__(self):
        return f"<AIIntegration id={self.id} name={self.name} type={self.integration_type} active={self.is_active}>"
        
class AIAutomation(db.Model):
    """Model for storing automated AI tasks and workflows."""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)  # Descriptive name for the automation
    description = db.Column(db.Text, nullable=True)  # Detailed description of what this automation does
    trigger_type = db.Column(db.String(50), nullable=False)  # Type of trigger (e.g., schedule, event, threshold)
    trigger_config = db.Column(db.Text, nullable=False)  # JSON configuration for the trigger
    action_type = db.Column(db.String(50), nullable=False)  # Type of action (e.g., notification, integration, api_call)
    action_config = db.Column(db.Text, nullable=False)  # JSON configuration for the action
    is_active = db.Column(db.Boolean, default=True)  # Whether this automation is currently active
    last_triggered = db.Column(db.DateTime, nullable=True)  # When this automation was last triggered
    execution_count = db.Column(db.Integer, default=0)  # Number of times this automation has been executed
    created_at = db.Column(db.DateTime, default=datetime.now)
    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)
    
    def __repr__(self):
        return f"<AIAutomation id={self.id} name={self.name} trigger={self.trigger_type} active={self.is_active}>"
        
class AutomationLog(db.Model):
    """Model for tracking automation execution history."""
    id = db.Column(db.Integer, primary_key=True)
    automation_id = db.Column(db.Integer, db.ForeignKey('ai_automation.id'), nullable=False)
    status = db.Column(db.String(20), nullable=False)  # Status of execution (success, failure, partial)
    execution_start = db.Column(db.DateTime, nullable=False, default=datetime.now)
    execution_end = db.Column(db.DateTime, nullable=True)
    result = db.Column(db.Text, nullable=True)  # JSON result of the execution
    error = db.Column(db.Text, nullable=True)  # Error message if status is failure
    created_at = db.Column(db.DateTime, default=datetime.now)
    
    # Relationship with automation
    automation = db.relationship('AIAutomation', backref=db.backref('logs', lazy=True))
    
    def __repr__(self):
        return f"<AutomationLog id={self.id} automation_id={self.automation_id} status={self.status}>"
        
class SystemMetric(db.Model):
    """Model for storing system performance metrics."""
    id = db.Column(db.Integer, primary_key=True)
    metric_name = db.Column(db.String(100), nullable=False)  # Name of the metric
    metric_value = db.Column(db.Float, nullable=False)  # Numerical value
    metric_unit = db.Column(db.String(50), nullable=True)  # Unit of measurement
    category = db.Column(db.String(50), nullable=False)  # Category (performance, usage, etc.)
    component = db.Column(db.String(50), nullable=False)  # Component (database, api, ai, etc.)
    timestamp = db.Column(db.DateTime, nullable=False, default=datetime.now)  # When the metric was recorded
    
    def __repr__(self):
        return f"<SystemMetric id={self.id} name={self.metric_name} value={self.metric_value} component={self.component}>"
        
class APIUsageLog(db.Model):
    """Model for tracking API usage."""
    id = db.Column(db.Integer, primary_key=True)
    endpoint = db.Column(db.String(255), nullable=False)  # API endpoint
    method = db.Column(db.String(10), nullable=False)  # HTTP method
    status_code = db.Column(db.Integer, nullable=False)  # HTTP status code
    response_time = db.Column(db.Float, nullable=False)  # Response time in seconds
    user_agent = db.Column(db.String(255), nullable=True)  # User agent
    ip_address = db.Column(db.String(50), nullable=True)  # IP address
    request_payload = db.Column(db.Text, nullable=True)  # Request payload
    timestamp = db.Column(db.DateTime, nullable=False, default=datetime.now)  # When the request was made
    
    def __repr__(self):
        return f"<APIUsageLog id={self.id} endpoint={self.endpoint} status={self.status_code}>"
        
class AIAgentMetrics(db.Model):
    """Model for tracking AI agent performance metrics."""
    id = db.Column(db.Integer, primary_key=True)
    agent_type = db.Column(db.String(50), nullable=False)  # Type of agent
    prompt_version_id = db.Column(db.Integer, db.ForeignKey('prompt_version.id'), nullable=True)  # Related prompt version
    request_count = db.Column(db.Integer, default=0)  # Number of requests
    average_response_time = db.Column(db.Float, default=0.0)  # Average response time in seconds
    average_rating = db.Column(db.Float, default=0.0)  # Average rating (1-5)
    token_usage = db.Column(db.Integer, default=0)  # Total tokens used
    error_count = db.Column(db.Integer, default=0)  # Number of errors
    date = db.Column(db.Date, nullable=False)  # Date of metrics collection
    
    # Relationship with prompt version
    prompt_version = db.relationship('PromptVersion', backref=db.backref('metrics', lazy=True))
    
    def __repr__(self):
        return f"<AIAgentMetrics id={self.id} agent={self.agent_type} date={self.date}>"
        
class NotificationChannel(db.Model):
    """Model for configuring notification channels."""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)  # Descriptive name
    channel_type = db.Column(db.String(20), nullable=False)  # Type (slack, email, sms)
    config = db.Column(db.Text, nullable=False)  # JSON configuration (recipients, etc.)
    is_active = db.Column(db.Boolean, default=True)  # Whether this channel is active
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.now)
    updated_at = db.Column(db.DateTime, nullable=False, default=datetime.now, onupdate=datetime.now)
    
    def __repr__(self):
        return f"<NotificationChannel id={self.id} name={self.name} type={self.channel_type}>"

class AlertRule(db.Model):
    """Model for defining alert triggering rules."""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)  # Rule name
    description = db.Column(db.Text, nullable=True)  # Rule description
    alert_type = db.Column(db.String(50), nullable=False)  # Type of alert to generate
    severity = db.Column(db.String(20), nullable=False)  # Severity to assign
    condition_type = db.Column(db.String(50), nullable=False)  # Type of condition (threshold, pattern, etc.)
    condition_config = db.Column(db.Text, nullable=False)  # JSON configuration for the condition
    component = db.Column(db.String(50), nullable=False)  # Component to monitor
    is_active = db.Column(db.Boolean, default=True)  # Whether this rule is active
    cooldown_minutes = db.Column(db.Integer, default=60)  # Minutes to wait before firing again
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.now)
    updated_at = db.Column(db.DateTime, nullable=False, default=datetime.now, onupdate=datetime.now)
    
    def __repr__(self):
        return f"<AlertRule id={self.id} name={self.name} type={self.alert_type}>"

class AlertNotificationMap(db.Model):
    """Model for mapping alerts to notification channels."""
    id = db.Column(db.Integer, primary_key=True)
    alert_type = db.Column(db.String(50), nullable=False)  # Type of alert
    min_severity = db.Column(db.String(20), nullable=False)  # Minimum severity level
    channel_id = db.Column(db.Integer, db.ForeignKey('notification_channel.id'), nullable=False)
    is_active = db.Column(db.Boolean, default=True)  # Whether this mapping is active
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.now)
    
    # Relationship
    channel = db.relationship('NotificationChannel', backref=db.backref('alert_mappings', lazy=True))
    
    def __repr__(self):
        return f"<AlertNotificationMap id={self.id} alert_type={self.alert_type} severity={self.min_severity}>"

class MonitoringAlert(db.Model):
    """Model for storing monitoring alerts."""
    id = db.Column(db.Integer, primary_key=True)
    alert_type = db.Column(db.String(50), nullable=False)  # Type of alert (error, warning, etc.)
    severity = db.Column(db.String(20), nullable=False)  # Severity level (critical, error, warning, info)
    component = db.Column(db.String(50), nullable=False)  # Component generating the alert
    message = db.Column(db.Text, nullable=False)  # Alert message
    details = db.Column(db.Text, nullable=True)  # Additional details
    status = db.Column(db.String(20), nullable=False, default='active')  # Status (active, acknowledged, resolved)
    acknowledged_at = db.Column(db.DateTime, nullable=True)  # When the alert was acknowledged
    resolved_at = db.Column(db.DateTime, nullable=True)  # When the alert was resolved
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.now)  # When the alert was created
    alert_rule_id = db.Column(db.Integer, db.ForeignKey('alert_rule.id'), nullable=True)  # Rule that triggered the alert
    notifications_sent = db.Column(db.Boolean, default=False)  # Whether notifications have been sent
    notification_sent_at = db.Column(db.DateTime, nullable=True)  # When notifications were sent
    
    # Relationships
    alert_rule = db.relationship('AlertRule', backref=db.backref('alerts', lazy=True))
    
    def __repr__(self):
        return f"<MonitoringAlert id={self.id} type={self.alert_type} status={self.status}>"
        
class ScheduledReport(db.Model):
    """Model for configuring scheduled reports."""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)  # Report name
    description = db.Column(db.Text, nullable=True)  # Report description
    report_type = db.Column(db.String(50), nullable=False)  # Type of report
    config = db.Column(db.Text, nullable=False)  # JSON configuration for the report
    schedule_type = db.Column(db.String(20), nullable=False)  # Schedule type (daily, weekly, monthly)
    schedule_config = db.Column(db.Text, nullable=False)  # JSON configuration for the schedule
    output_format = db.Column(db.String(20), nullable=False)  # Output format (pdf, html, csv, excel)
    recipients = db.Column(db.Text, nullable=False)  # JSON array of recipient email addresses
    is_active = db.Column(db.Boolean, default=True)  # Whether this report is active
    last_run = db.Column(db.DateTime, nullable=True)  # When the report was last run
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.now)
    updated_at = db.Column(db.DateTime, nullable=False, default=datetime.now, onupdate=datetime.now)
    
    def __repr__(self):
        return f"<ScheduledReport id={self.id} name={self.name} type={self.report_type}>"
        
class ReportExecution(db.Model):
    """Model for tracking report execution history."""
    id = db.Column(db.Integer, primary_key=True)
    report_id = db.Column(db.Integer, db.ForeignKey('scheduled_report.id'), nullable=False)
    status = db.Column(db.String(20), nullable=False)  # Status of execution (success, failure, partial)
    execution_start = db.Column(db.DateTime, nullable=False, default=datetime.now)
    execution_end = db.Column(db.DateTime, nullable=True)
    output_file_path = db.Column(db.String(255), nullable=True)  # Path to the generated report file
    delivery_status = db.Column(db.String(20), nullable=True)  # Delivery status (sent, failed)
    error = db.Column(db.Text, nullable=True)  # Error message if status is failure
    
    # Relationship with report
    report = db.relationship('ScheduledReport', backref=db.backref('executions', lazy=True))
    
    def __repr__(self):
        return f"<ReportExecution id={self.id} report_id={self.report_id} status={self.status}>"